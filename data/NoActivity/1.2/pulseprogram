# 1 "/opt/PV51/exp/stan/nmr/lists/pp/CESTFISP_SSprep_gate.ppg"
;**************************************************************** ;
; Copyright (c) 2000 - 2003
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; All Rights Reserved
;
;*****************************************
; 23.04.2002  unified, freq_lists for 180,
; slice loop after segm loop
; with add. delay (d6) before  next inv. pulse  
;*****************************************
;
; d0 - TR padding
; d1 - T1 padding
; d2 - T2 padding
; d3 = PVM_GradDelayTime
; d4 = PVM_RampTime
; d6 = used for Inv_Rep_time 
; d8 CONFIG_amplifier_enable
; d20 = FID_delay
; d21 = ECHO_delay
; l3=NumCestExps ;Added Dec 20 2011 by Marty Pagel

define list<frequency> o1list = {$ACQ_O1_list}
define list<frequency> o2list = {$ACQ_O2_list}
define list<frequency> o3list = {$ACQ_O3_list}
define list<frequency> o4list = {$CestArray} ;Added Dec 20 2011 by Marty Pagel
define list<frequency> onres  = {0.0}
define list<power> PwL = { $PVM_ppgPowerList1 }
define loopcounter ldk = {$CestPulses}       ; Added Dec 20 2011 by Marty Pagel
;define loopcounter lbreath = {$CestBreathPulses}       ; Added may 22 2014 ed
define loopcounter cest = {$NumCestExps}     ; Added Dec 20 2011 by Marty Pagel

;new convention:
;d4 = PVM_RiseTime
"d14 = d4/2"

define delay dur20
"dur20 = d20 - de"

define delay dur1
"dur1 =d1 - 10u"

define delay d1x
"d1x = d1 - 25u"

define delay d9x
"d9x = d9 - 20u"

# 1 "/opt/PV51/exp/stan/nmr/lists/pp/PrepModulesHead.mod" 1
;****************************************************************
;
; Copyright (c) 2003-2007
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; $Id: PrepModulesHead.mod,v 1.14.2.1 2007/07/02 13:05:36 mawi Exp $
;
; All Rights Reserved
;
; Declaration of pulseprogram parameters and subroutines for 
; preparation  modules
;
;****************************************************************

;**** Fat Suppression Module ****

# 1 "/opt/PV51/exp/stan/nmr/lists/pp/FatSupDef.mod" 1
;****************************************************************
;
; Copyright (c) 2002-2007
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; $Id: FatSupDef.mod,v 1.1.2.2 2007/07/02 14:26:25 mawi Exp $
;
; All Rights Reserved
;
; FatSupDef.mod : Declaration of Fat Suppression Subroutine
;
;****************************************************************

if(PVM_FatSupOnOff)
{
define list<frequency> modlis6 = {$PVM_FatSupFL}
define delay FsD0 = {$PVM_FsD0}
define delay FsD1 = {$PVM_FsD1}
define delay FsD2 = {$PVM_FsD2}

define pulse FsP0 = {$PVM_FsP0}
}

















# 18 "/opt/PV51/exp/stan/nmr/lists/pp/PrepModulesHead.mod" 2


;**** Flow Saturation Module ****

# 1 "/opt/PV51/exp/stan/nmr/lists/pp/FlowSatDef.mod" 1
;****************************************************************
;
; Copyright (c) 2005-2007
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; $Id: FlowSatDef.mod,v 1.1.4.2 2007/07/02 13:26:58 mawi Exp $
;
; All Rights Reserved
;
; FlowSatDef.mod: Declaration of subroutines for Flow Saturation 
; call
; subr FlowSat()
; subr FlowSatInit()
; subr FlowSatInc()
; 
;****************************************************************

if(PVM_InFlowSatOnOff == 1)
   {
define list<frequency> modlis4 = {$PVM_InFlowSatFL}
define delay SfD0 = {$PVM_SfD0}
define delay SfD1 = {$PVM_SfD1}
define delay SfD2 = {$PVM_SfD2}

define pulse SfP0 = {$PVM_SfP0}

define loopcounter SfLp0 = {$PVM_SfLp0}
   }










































# 22 "/opt/PV51/exp/stan/nmr/lists/pp/PrepModulesHead.mod" 2


;**** Inversion Pulse Module ****
# 1 "/opt/PV51/exp/stan/nmr/lists/pp/InvPulseDef.mod" 1
;****************************************************************
;
; Copyright (c) 2002-2007
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; $Id: InvPulseDef.mod,v 1.1.2.2 2007/07/02 14:26:25 mawi Exp $
;
; All Rights Reserved
;
; InvPulseDef.mod : Declaration of Inversion Pulse subroutine
;
; call
; subr InvPulse()
;
;****************************************************************
;   
;       PVM_InvRFPulseArr      :  
;     
;       sp22            TPQQ[14].name : PVM_InvRFPulsePropertyArr[0].Filename
;
;       PVM_IpP0                      :  PVM_InvRFPulseArr[0].PulseLength
;
;       PVM_IpD2                      :  PVM_InvPulseDelay[0]
;       PVM_IpD3                      :  PVM_InvPulseSpoilTime[0]
;       PVM_IpD1                      :  CONFIG_amplifier _enable
;       PVM_IpD0                      :  PVM_RampTime
;

if(PVM_InvPulseOnOff == 1)
{
define list<frequency>  modlis2= {$PVM_InvPulseOffsetHz}
define delay IpD0 = {$PVM_IpD0}
define delay IpD1 = {$PVM_IpD1}
define delay IpD2 = {$PVM_IpD2}
define delay IpD3 = {$PVM_IpD3}

define pulse IpP0 = {$PVM_IpP0}
}




















# 25 "/opt/PV51/exp/stan/nmr/lists/pp/PrepModulesHead.mod" 2


;**** Magnetisation Transfer Module ****

# 1 "/opt/PV51/exp/stan/nmr/lists/pp/MagTransDef.mod" 1
;****************************************************************
; $Source: /pv/CvsTree/pv/gen/src/prg/methManag/PPG/MagTransDef.mod,v $
;
; Copyright (c) 2005-2007
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; All Rights Reserved
;
; MagTransDef.mod: Declaration of subroutine for Magnetization 
;                  transfer 
; call
; subr MagTrans()
;
; $Id: MagTransDef.mod,v 1.1.2.3 2008/06/05 17:10:28 mawi Exp $
;****************************************************************
;**** Magnetisation Transfer Module ****


if(PVM_MagTransOnOff)
{
define list<frequency> modlis3 = {$PVM_MagTransFL} 
define delay MtD0 = {$PVM_MtD0}
define delay MtD1 = {$PVM_MtD1}
define delay MtD2 = {$PVM_MtD2}
define delay MtD3 = {$PVM_MtD3}

define pulse MtP0 = {$PVM_MtP0}

define loopcounter MtLp0 = {$PVM_MtLp0}
}


















# 29 "/opt/PV51/exp/stan/nmr/lists/pp/PrepModulesHead.mod" 2



;**** Saturation Pulse Module ****

# 1 "/opt/PV51/exp/stan/nmr/lists/pp/SatPulseDef.mod" 1
;****************************************************************
;
; Copyright (c) 2002-2003
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; $Id: SatPulseDef.mod,v 1.1.2.3 2009/02/25 09:35:00 fhen Exp $
;
; All Rights Reserved
;
; SatPulseDef.mod : Declaration of Saturation Pulse subroutines
; call 
; subr SatPulse()
;
;****************************************************************
;   
;    PVM_SatRFPulseArr      :  
;     
;       sp28            DPQQ[12].name : PVM_SatRFPulsePropertyArr[0].Filename
;       sp29            DPQQ[13].name : PVM_SatRFPulsePropertyArr[1].Filename
;       sp30            DPQQ[14].name : PVM_SatRFPulsePropertyArr[2].Filename
;       sp31            DPQQ[15].name : PVM_SatRFPulsePropertyArr[3].Filename
;
;       PVM_SpP0                     :  PVM_SatRFPulseArr[0].PulseLength
;       PVM_SpP1                     :  PVM_SatRFPulseArr[1].PulseLength
;       PVM_SpP2                     :  PVM_SatRFPulseArr[2].PulseLength
;       PVM_SpP3                     :  PVM_SatRFPulseArr[3].PulseLength
;
;       PVM_SpD2                     :  PVM_SatPulseDelay1[0]
;       PVM_SpD6                     :  PVM_SatPulseSpoilTime[0]
;       PVM_SpD10                    :  PVM_SatPulseDelay2[0]
;       PVM_SpD3                     :  PVM_SatPulseSpoilTime[1]
;       PVM_SpD7                     :  PVM_SatPulseDelay1[1]
;       PVM_SpD11                    :  PVM_SatPulseDelay2[1]
;       PVM_SpD4                     :  PVM_SatPulseDelay1[2]
;       PVM_SpD8                     :  PVM_SatPulseSpoilTime[2]
;       PVM_SpD12                    :  PVM_SatPulseDelay2[2]
;       PVM_SpD5                     :  PVM_SatPulseDelay1[3]
;       PVM_SpD9                     :  PVM_SatPulseSpoilTime[3]
;       PVM_SpD13                    :  PVM_SatPulseDelay2[3]
;

if(PVM_SatPulseOnOff == 1)
   {
define list<frequency> modlis7 = {$PVM_SatPulseOffsetHz}

define delay SpD0 = {$PVM_SpD0}
define delay SpD1 = {$PVM_SpD1}
define delay SpD2 = {$PVM_SpD2}
define delay SpD3 = {$PVM_SpD3}
define delay SpD4 = {$PVM_SpD4}
define delay SpD5 = {$PVM_SpD5}
define delay SpD6 = {$PVM_SpD6}
define delay SpD7 = {$PVM_SpD7}
define delay SpD8 = {$PVM_SpD8}
define delay SpD9 = {$PVM_SpD9}
define delay SpD10 = {$PVM_SpD10}
define delay SpD11 = {$PVM_SpD11}
define delay SpD12 = {$PVM_SpD12}
define delay SpD13 = {$PVM_SpD13}
define pulse SpP0 = {$PVM_SpP0}
define pulse SpP1 = {$PVM_SpP1}
define pulse SpP2 = {$PVM_SpP2}
define pulse SpP3 = {$PVM_SpP3}

   }




























































# 34 "/opt/PV51/exp/stan/nmr/lists/pp/PrepModulesHead.mod" 2



;*** Saturation Slices Module ***

# 1 "/opt/PV51/exp/stan/nmr/lists/pp/SatSliceDef.mod" 1
;****************************************************************
;
; Copyright (c) 2002-2007
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; $Id: SatSliceDef.mod,v 1.2.2.1 2007/07/02 13:01:13 mawi Exp $
;
; All Rights Reserved
;
; SatSlices.mod : Declaration of Saturation Slice subroutine
; call
; subr SatSlices()
;
;****************************************************************
;
; SaturationSlicesPulse :
;
;        sp25              DPQQ[9].name : PVM_SatSlicesPulse.Filename
;        PVM_SatP0                     : PVM_SatSlicesPulse.Length
;
;        
;        PVM_SatD1                     : CONFIG_amplifier_enable
;        PVM_SatD0                     : PVM_RampTime
;        PVM_SatD2                     : PVM_FovSatSpoilTime
;        PVM_SatLp0                    : PVM_FovSatNSlices 
;
;**** Saturation Slice Module ****
if(PVM_FovSatOnOff == 1)
{
define list<frequency> modlis5 = {$PVM_FovSatFL}
define delay SatD0 = {$PVM_SatD0}
define delay SatD1 = {$PVM_SatD1}
define delay SatD2 = {$PVM_SatD2}

define pulse SatP0 = {$PVM_SatP0}

define loopcounter SatLp0 = {$PVM_SatLp0}
}























 
# 39 "/opt/PV51/exp/stan/nmr/lists/pp/PrepModulesHead.mod" 2



;**** Black Blood Module ****
# 1 "/opt/PV51/exp/stan/nmr/lists/pp/BlBloodDef.mod" 1
;****************************************************************
;
; Copyright (c) 2007
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; $Id: BlBloodDef.mod,v 1.1.2.2 2007/07/02 14:26:25 mawi Exp $
;
; All Rights Reserved
;
; BlBloodDef.mod : Declaration of Black blood  subroutine
;
; call
; subr BlBlood(ph0) : Black blood preparation with RF phaselist
;                     ph0
;
;****************************************************************

if(PVM_BlBloodOnOff)
  {
define list<frequency> modlis8 = {$PVM_BlBloodFL}
define delay BlbD0 = {$PVM_BlbD0}
define delay BlbD1 = {$PVM_BlbD1}
define delay BlbD2 = {$PVM_BlbD2}
define delay BlbD3 = {$PVM_BlbD3}

define pulse BlbP0 = {$PVM_BlbP0}
  }
























# 43 "/opt/PV51/exp/stan/nmr/lists/pp/PrepModulesHead.mod" 2



;**** Trigger Module ****
define delay TrigD0 = {$PVM_TrigD0}
;**** Trigger Out Module ****
define delay TrigOutD0 = {$PVM_TrigOutD0}

;**** OuterVolumeSuppression **** Solvent Suppression Module ****

# 1 "/opt/PV51/exp/stan/nmr/lists/pp/WsOvsDef.mod" 1
;****************************************************************
;
; Copyright (c) 2005-2007
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; $Id: WsOvsDef.mod,v 1.1.2.3 2008/03/19 14:25:28 sako Exp $
;
; All Rights Reserved
;
; WsOvsDef.mod: Declaration of water suppression and Outer 
;               volume suppression subroutines
;
; call 
; subr Ovs(ph0) ;  execution of OVS with ph0 phaselist
;
; subr WsOvs(ph0,ph1) : execution of OVS with ph0 and WS with ph1
;                       phaselist
;****************************************************************

;**** OuterVolumeSuppression ****

if(PVM_OvsOnOff == 1)
{
define list<frequency> Ovslist={$PVM_OvsFrequencyList}
define delay OvsD0 = {$PVM_OvsD0}
define delay OvsD1 = {$PVM_OvsD1}
define pulse OvsP0 = {$PVM_OvsP0}
}





























;*** WaterSuppression Module with OVS ****

if (PVM_WsMode)
{

define list<frequency> Wslist={$PVM_WsOffsetHz}
define pulse WsP0 = {$PVM_WsP0}
define pulse WsP1 = {$PVM_WsP1}
define pulse WsP2 = {$PVM_WsP2}
define delay WsNp0 
"WsNp0 = WsP0"
define delay WsNp1 
"WsNp1 = WsP1"
define delay WsNp2 
"WsNp2 = WsP2"
define list<delay> ChD1={$PVM_ChppgD1}
define list<delay> ChD2={$PVM_ChppgD2}
define list<delay> VpD1={$PVM_VpppgD1}
define list<delay> VpD2={$PVM_VpppgD2}

}
















































































































































































# 53 "/opt/PV51/exp/stan/nmr/lists/pp/PrepModulesHead.mod" 2


;**** Solvent Suppression module and FOV Saturation module ******

# 1 "/opt/PV51/exp/stan/nmr/lists/pp/WsSatDef.mod" 1
;******************************************************************
;
; Copyright (c) 2002-2007
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; $Id: WsSatDef.mod,v 1.1.2.2 2007/07/02 14:26:26 mawi Exp $ 
;
; All Rights Reserved
;
; WsSatDef.mod - Declaration of water suppression and FOV saturation 
;                subroutines
; call
; subr WsSat(ph0) : execution of WS with ph0 phaselist and 
;                   FOV saturation (as passed as argument)    
;      
;*******************************************************************



















































































































































































# 57 "/opt/PV51/exp/stan/nmr/lists/pp/PrepModulesHead.mod" 2


;*********** selective inversion recovery **********

# 1 "/opt/PV51/exp/stan/nmr/lists/pp/SelSliceIrDef.mod" 1
;****************************************************************
;
; Copyright (c) 2007
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; $Id: SelSliceIrDef.mod,v 1.1.2.2 2007/07/02 14:26:25 mawi Exp $
;
; All Rights Reserved
;
; SelSliceIrDef.mod : declaration of slice Selective Inversion 
;                     Recovery subroutine
; call SliceSelIr()
; 
;
;****************************************************************


if(PVM_SelIrOnOff)
  {
define list<frequency> IrFL = {$PVM_SelIrFL} 
define delay IrD0 = {$PVM_SelIrD0}
define delay IrD1 = {$PVM_SelIrD1}
define delay IrD2 = {$PVM_SelIrD2}
define delay IrD3 = {$PVM_SelIrD3}
define delay IrD4 = {$PVM_SelIrD4}

define pulse IrP0 = {$PVM_SelIrP0}

define loopcounter IrL0 = {$PVM_SelIrL0}
  }



















# 61 "/opt/PV51/exp/stan/nmr/lists/pp/PrepModulesHead.mod" 2


;***********Tagging*****************

# 1 "/opt/PV51/exp/stan/nmr/lists/pp/TagDef.mod" 1
;****************************************************************
;
; Copyright (c) 2007
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; $Id: TagDef.mod,v 1.1.2.4 2008/06/05 17:09:32 mawi Exp $
;
; All Rights Reserved
;
; TagDef.mod : Declaration of tagging subroutine
; call
; subr Tagging()
;
;****************************************************************

if(PVM_TaggingOnOff)
{
define list<frequency> taggfreq={$PVM_TaggingFL}

define delay TaggD0 = {$PVM_TaggingD0}
define delay TaggD1 = {$PVM_TaggingD1}
define delay TaggD2 = {$PVM_TaggingD2}
define delay TaggD3 = {$PVM_TaggingD3}
define delay TaggD4 = {$PVM_TaggingD4}
define delay TaggD5 = {$PVM_TaggingD5}

define pulse TaggP0 = {$PVM_TaggingP0}
define loopcounter TaggL0 = {$PVM_TaggingLp0}
}


























































# 65 "/opt/PV51/exp/stan/nmr/lists/pp/PrepModulesHead.mod" 2


;*********** Noe *******************

# 1 "/opt/PV51/exp/stan/nmr/lists/pp/NoeDef.mod" 1
;****************************************************************
;
; Copyright (c) 2007
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; $Id: NoeDef.mod,v 1.1.2.2 2007/07/02 14:26:26 mawi Exp $
;
; All Rights Reserved
;
; NoeDef.mod: Declaration of Nuclear Overhouser Enhancement 
;             subroutine
; call
; subr Noe()
;
;****************************************************************

if(PVM_NoeOnOff == On)
{
define delay NoeD0 = {$PVM_NoeD0}
define delay NoeD1 = {$PVM_NoeD1}
}





















# 69 "/opt/PV51/exp/stan/nmr/lists/pp/PrepModulesHead.mod" 2




define loopcounter EvolLp0 = {$PVM_EvolLp0}
define list<delay> EvolD0 = {$PVM_EvolD0}


# 51 "/opt/PV51/exp/stan/nmr/lists/pp/CESTFISP_SSprep_gate.ppg" 2

# 1 "/opt/PV51/exp/stan/nmr/lists/pp/MRI.include" 1
;****************************************************************
;
; $Source: /pv/CvsTree/pv/gen/src/prg/methManag/PPG/MRI.include,v $
;
; Copyright (c) 2006
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; All Rights Reserved
;
;;****************************************************************
;MRI.include

# 1 "/opt/PV51/exp/stan/nmr/lists/pp/Avance.incl" 1
;Avance2.incl
;   for 1
;
;avance-version (07/01/22)
;
;$CLASS=HighRes Incl
;$COMMENT=



























































































































































;$Id: Avance2.incl,v 1.14.2.6 2008/04/03 08:54:39 mah Exp $
# 14 "/opt/PV51/exp/stan/nmr/lists/pp/MRI.include" 2


define delay aqq
define delay deparx
define delay derxadc
define delay rdepa

"aqq=dw*td"
"rdepa=de-depa"
"deparx=depa-derx"
"derxadc=derx-deadc"











































# 86 "/opt/PV51/exp/stan/nmr/lists/pp/MRI.include"






# 52 "/opt/PV51/exp/stan/nmr/lists/pp/CESTFISP_SSprep_gate.ppg" 2

# 1 "/opt/PV51/exp/stan/nmr/lists/pp/eddummy.mod" 1
;---end of alpha/2 -----
;-- initial dummy echoes -----------------------
































# 53 "/opt/PV51/exp/stan/nmr/lists/pp/CESTFISP_SSprep_gate.ppg" 2

preset off

fq1b receive				     	     \n if (CONFIG_instrument_type != Avance_I)           \n {                                                 \n dccorr                                         \n }                         \n if (CONFIG_preemp_type == GREAT_60)               \n {                                                 \n if (CONFIG_instrument_type != Avance_III)      \n {                                              \n 500m setnmr0|34|33|32                          \n }                                              \n else                                           \n {                                              \n 200u setnmr0|34|33|32                          \n }                                              \n }                                                 \n if (CONFIG_preemp_type == DPP_with_SW_Blanking)   \n {                                                 \n 10u ctrlgrad 0                                 \n 10u grad{(0)|(0)|(0) }			     \n 200u setnmr0|34|33|32                          \n }

if( ACQ_dim >=2 )
{
  lgrad r2d<2d> = ACQ_size[1]
}
if( ACQ_dim >= 3)
{
  lgrad r3d<3d> = l5
}
else
{
  lgrad r3d<3d> = 1
}

lgrad slice = NSLICES


start,  d4    
segm,   sgrad r2d
;#include <TriggerPerPhaseStep.mod>

;preslice, prep mag
;        25u gatepulse 1
;mtc, 10u
;	10u o4list:f1
;        p27:sp27        ;sp27 is DPQQ[11]
;       lo to mtc times ldk

slice,  10u   fq8b:f1
        5u PwL.res
        10u   
;----------------------- Trigger----------------	

;#include <TriggerPerSlice.mod>

;----------------------CEST Preparation------------
;Added Dec 20 2011 by Marty Pagel

;gating steady state
# 1 "/opt/PV51/exp/stan/nmr/lists/pp/CESTSSPrep.mod" 1
; steady state CEST prep for gating
; Written by: Ed Randtke
; Date: 21 May 2014

;cest prep

if(DoHTYesNo)
{
	d4 grad{(1)|(0)|(0)}
}

        25u gatepulse 1
mtc, 10u
	10u o4list:f1
        p27:sp27        ;sp27 is DPQQ[11]
        lo to mtc times ldk

if (ACQ_trigger_enable == 1)
{
	;steady state, lock until trigger

edgate,10u

	;subr eddummy(96)
	10u o4list:f1
	p27:sp27

	30u
	if trignl1 goto endgate ;break on trigger
	goto edgate


;endgate, 10u
endgate, d4 grad{(0)|(0)|(10)}
	10u
	d4 groff
}

if(DoHTYesNo)
{
	d4 groff
}
# 96 "/opt/PV51/exp/stan/nmr/lists/pp/CESTFISP_SSprep_gate.ppg" 2

;#include<CESTPrep_Kyle.mod>

        150u

;----------------------end of Trigger --------------	
;--------------------------Inversion----------------
if( PVM_ppgFlag2 == 1 )
;if(FISP_inversion_enable == Yes)
{
inv,     d4   onres:f1                  ;on resonance 
  	 d8   gatepulse 1
         p4:sp4 ph4                   ;inversion pulse
         d16                          ;inversion time  
}
;-----------------------end of Inversion-----------

;--- spoiler before each slice, and setting the slice grad for the alpha/2
	d10   grad{(0)|(0)|(t0)} o1list:f1
;---alpha/2 -----
if(ssfp_preparation == Alpha_2)
{	
alpha2, 10u
	p0:sp3 	 ph3
	10u
        d4    grad{(0)|(0)|(t11)}
        10u   o3list:f1
        d9x
        10u   o1list:f1       
        d4    grad{(0)|(0)|(t0)}   gatepulse 1	
}		     
;---end of alpha/2 -----
;-- initial dummy echoes -----------------------
if(L[6] != 0)
{
init1,  10u
	p0:sp0 	 ph0
	10u			     
        5u    grad{(t2)|(0)|(t1)}  
        10u   o2list:f1       ;phase advance - start
	d1x                   ;
	10u   o1list:f1       ;phase advance - end	
	d4    grad{(t5)|(0)|(0)} 
        d20   ph1 
        aqq     
        d21  
if(PVM_ppgMode1 == 0)
{    
        d1    grad{(t9)|(0)|(t10)}  o2list.inc
}
else
{
        d1    grad{(t9)|(0)|(t10)}
}
        d4    grad{(0)|(0)|(t0)}  gatepulse 1
        lo to init1 times l6
}

;--- end of alpha/2 and dummy echoes ------------
;--- Starter Sequence  --------------------------
if(ssfp_preparation == Starter_Sequence)
{
;--  Preparation for Mz   -----------------------	
alpha,  10u
	p0:sp5 	 ph5
	10u			     
        5u    grad{(0)|(0)|(t1)}  
 
        10u     o2list:f1       ;phase advance - start
	d1x                     ; 
	10u	o1list:f1       ;phase advance - end
	d4    grad{(0)|(0)|(0)} 
        d20   ph1 
        aqq     
        d21 
        d1    grad{(0)|(0)|(t10)}
        d4    grad{(0)|(0)|(t0)}  gatepulse 1
        10u
	p0:sp6 	 ph6
	10u		     
        d4    grad{(40)|(30)|(35)}
        4m
        d4    grad{(0)|(0)|(t0)} PwL:f1  gatepulse 1

;--  Preparation for Mxy   -----------------------
if(L[7] != 0)
{
init2,  10u
	p0:sp1(currentpower) 	 ph0
	10u			     
        5u    grad{(t2)|(0)|(t1)}  
 
        10u      o2list:f1      ;phase advance - start
	d1x                     ; 
	10u	 o1list:f1      ;phase advance - end
	d4    grad{(t5)|(0)|(0)} 
        d20   ph1 
        aqq     
        d21   PwL.inc
if(PVM_ppgMode1 == 0)
{    
        d1    grad{(t9)|(0)|(t10)}  o2list.inc
}
else
{
        d1    grad{(t9)|(0)|(t10)}
}
        d4    grad{(0)|(0)|(t0)} PwL:f1  gatepulse 1
        lo to init2 times l7
}
}
; ---- End of Starter Sequence ---------------	

;----------------- movie loop-----------------
movie,  rgrad r2d
;------------------- ssfp loops --------------
ssfp,   10u
	p0:sp0  ph0                   	
	10u					;compensation
 if(PVM_ppgMode1 == 0)
{       
        d1      grad{(t2)|r2d(t3)|(t1)+r3d(t4)}
}
else
{
        5u      grad{(t2)|r2d(t3)|(t1)+r3d(t4)}

        10u     o2list:f1       ;phase advance - start
	d1x                     ; 
	10u	o1list:f1       ;phase advance - end
}
 
;-------------------------frequency encoding---------------
	d4 	grad{(t5)|(0)|(0)} o1list:f1
	dur20
        rdepa						 \n deparx     adc  setrtp1|2 syrec fqatofqb:f1 \n derxadc    ph1:r setrtp1|1 			 \n deadc      setrtp1|0|8
	aqq	cpdngs30:f1
	d21	
;------------------------spoiler + phase rewinding -------
 if(PVM_ppgMode1 == 0)
{
        10u eoscnp
        5u     grad{(t9)|r2d(t7)|(t10)+r3d(t8)}
        10u     o2list:f1       ;phase advance - start
	d1x         
        5u	o1list:f1       
	5u      o2list.inc  
}
else
{
        dur1   	grad{(t9)|r2d(t7)|(t10)+r3d(t8)}  
	10u eoscnp
}
	d4      grad{(0)|(0)|(t0)}    gatepulse 1 

;------------------------2d loops--------------------------
	igrad r2d
if (l4 != 1)
{
	lo to ssfp times l4 ;   l4 = ACQ_phase_factor
}
;------------------end of ssfp loops ----------------------


;----------------------ssdum loops--------------------------

if( PVM_ppgFlag1 == 1 )
;if(Segment_separation > 0)
{
        dgrad r2d

ssdum,  10u
        p0:sp0  ph0
        10u
        5u      grad{(t2)|r2d(t3)|(t1)+r3d(t4)}	
        10u     o2list:f1       ;phase advance - start
	d1x
	10u	o1list:f1       ;phase advance - end
        d4      grad{(t5)|(0)|(0)} 
        d20     ph1
        aqq     
        d21   
if(PVM_ppgMode1 == 0)
{
        d1      grad{(t9)|r2d(t7)|(t10)+r3d(t8)}  o2list.inc
 }
else
{
        d1      grad{(t9)|r2d(t7)|(t10)+r3d(t8)}
} 
        d4      grad{(0)|(0)|(t0)}  gatepulse 1

        lo to ssdum times l1	;  l1 fraction of ACQ_phase_factor 
        5u
        igrad r2d
}
;-----------------------end of ssdum loop----------------------

        lo to movie times l3 	;  l3 = number of frames (movie loop)
;-----------------------end of movie loop----------------------

	islice
        3u  o1list.inc  o3list.inc
if(PVM_ppgMode1 == 0)
{
       3u  o2list.res
}
else
{
        3u  o2list.inc  
}
        d4   groff		;  groff to prevent "grad ON" for a long time
        d6                      ;  add. delay controlled by Scan_RepetitionTime/Inv_Rep_time
        lo to slice times NSLICES 
;-----------------------end of slice loop--------------------
        10u
	lo to segm times l2	;  l2 = ACQ_size[1]/ACQ_phase_factor		


;-----------------------------3d loop---------------------------
if( ACQ_dim >= 3 )
{
	igrad r3d
	lo to segm times l5	;  l5 = ACQ_size[2]
}


        lo to start times NAE   ;  NAE loop used for averaging experiments       
        o4list.inc              ;  Next Satfrq in CestArray Added Dec 20 2011 by Marty Pagel
 	lo to start times NR    ;  NR loop used for repetitions
	zslice

        3u  o1list.res
        3u  o2list.res

if (ACQ_scan_type != Scan_Experiment) \n{ \n goto start \n}

exit

;fisp phase lists
ph0 = 0
ph1 = 0
ph3 = 0 
ph4 = 0
ph5 = 0
ph6 = 0


	



